import {
	Update,
	Ctx,
	Start,
	Command,
	On,
	Action,
} from 'nestjs-telegraf';
import { Context, Scenes, Markup } from 'telegraf';
import { LlmService } from '../llm/llm.service';
import { ContextService } from '../context/context.service';
import { ModelService } from '../model/model.service';

@Update()
export class TelegramUpdate {
	constructor(
		private readonly llmService: LlmService,
		private readonly contextService: ContextService,
		private readonly modelService: ModelService,
	) {}
	
	@Start()
	onStart(@Ctx() ctx: Context) {
		const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.
  
–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /model, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å AI-–º–æ–¥–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /image, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.`;
		ctx.reply(welcomeMessage);
	}
	
	@Command('model')
	async onModelCommand(@Ctx() ctx: Context) {
		const keyboard = Markup.inlineKeyboard([
			[Markup.button.callback('ü§ñ OpenAI', 'select_provider_openai')],
			[Markup.button.callback('‚ú® Gemini', 'select_provider_gemini')],
		]);
		await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:', keyboard);
	}
	
	@Action(/select_provider_(.+)/)
	async onProviderSelect(@Ctx() ctx: any) {
		const provider = ctx.match[1] as 'openai' | 'gemini';
		await ctx.editMessageText(`üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è ${provider}...`);
		
		const models = await this.modelService.getModelsByProvider(provider);
		
		if (!models || models.length === 0) {
			await ctx.editMessageText(
				'üòï –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
			);
			return;
		}
		
		const buttons = models.map((model) =>
			Markup.button.callback(model.name, `select_model_${model.id}`),
		);
		
		const keyboard = Markup.inlineKeyboard(
			buttons.reduce((acc, button, index) => {
				if (index % 2 === 0) acc.push([button]);
				else acc[acc.length - 1].push(button);
				return acc;
			}, []),
		);
		
		await ctx.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è ${provider}:`, keyboard);
	}
	
	@Action(/select_model_(.+)/)
	async onModelSelect(@Ctx() ctx: any) {
		const modelId = ctx.match[1];
		this.modelService.setUserModel(ctx.chat.id, modelId);
		await ctx.editMessageText(`‚úÖ –ú–æ–¥–µ–ª—å ${modelId} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞!`);
	}
	
	@Command('image')
	async onImageCommand(@Ctx() anusc: Scenes.SceneContext) {
		await anusc.scene.enter('CREATE_IMAGE_SCENE');
	}
	
	@On('text')
	async onMessage(@Ctx() ctx: Context) {
		const thinkingMessage = await ctx.reply('–î—É–º–∞—é... ü§î');
		const chatId = ctx.chat.id;
		const userMessage = (ctx.message as any).text;
		
		if (userMessage.toLowerCase().startsWith('–∫–∞—Ä—Ç–∏–Ω–∫–∞ ')) {
			const prompt = userMessage.substring(9).trim();
			const imageProvider = this.llmService.getImageProvider();
			const imageUrl = await imageProvider.createImage(prompt);
			
			await ctx.telegram.editMessageText(
				chatId,
				thinkingMessage.message_id,
				null,
				imageUrl,
			);
			return;
		} else {
			const history = this.contextService.getContext(chatId);
			const selectedModel = this.modelService.getUserModel(chatId);
			const provider = this.llmService.getProviderForModel(selectedModel);
			const response = await provider.ask(history, userMessage, selectedModel);
			
			this.contextService.updateContext(chatId, {
				role: 'user',
				content: userMessage,
			});
			this.contextService.updateContext(chatId, {
				role: 'assistant',
				content: response,
			});
			
			try {
				await ctx.telegram.editMessageText(
					chatId,
					thinkingMessage.message_id,
					null,
					response,
				);
			} catch (e) {
				await ctx.reply(response);
			}
		}
	}
}